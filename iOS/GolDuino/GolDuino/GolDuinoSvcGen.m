/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#import "GolDuinoSvcGen.h"

@implementation PinSetting

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"PinSetting"

@synthesize pinIsSet;
- (NSInteger)getPin
{
    return pin;
}

- (void)setPin:(NSInteger )_pin
{
    pin = _pin;
    pinIsSet = YES;
}

@synthesize valIsSet;
- (NSInteger)getVal
{
    return val;
}

- (void)setVal:(NSInteger )_val
{
    val = _val;
    valIsSet = YES;
}

@synthesize strIsSet;
- (NSString *)getStr
{
    return str;
}

- (void)setStr:(NSString *)_str
{
    str = _str;
    strIsSet = (_str != nil) ? YES : NO;
}


+ (PinSetting *)deserialiseFromString: (NSString *)string
{
    return [PinSetting deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (PinSetting *)deserialiseFromPayload: (GolgiPayload *)payload
{
    PinSetting *inst = [[PinSetting alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.pin = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"2:"]) != nil){
            inst.val = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"3:"]) != nil){
            [inst setStr:str];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (PinSetting *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [PinSetting fromJSONString:jsonString error:&_localErr];
}

+ (PinSetting *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [PinSetting fromJSONObject:gjo error:err];
    }
}

+ (PinSetting *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [PinSetting fromJSONObject:jsonObj error:&_localErr];
}

+ (PinSetting *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    PinSetting *inst = [[PinSetting alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"pin" error:_err]) != nil){
            inst.pin = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'pin' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'pin' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"val" error:_err]) != nil){
            inst.val = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'val' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'val' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"str" error:_err]) != nil){
            [inst setStr:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'str' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'str' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(pinIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"pin"], (long)pin];
        _comma = @",";
    }
    if(valIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"val"], (long)val];
        _comma = @",";
    }
    if(strIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"str"], [CSL encodeJSString:str]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(pinIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)pin];
    }
    if(valIsSet){
        [_str appendFormat:@"%@2: %ld\n", prefix, (long)val];
    }
    if(strIsSet){
        [_str appendFormat:@"%@3: \"%@\"\n", prefix, [CSL  NTLEscapeString:str]];
    }

    return [NSString stringWithString:_str];
}

- (PinSetting *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        pinIsSet = defIsSet;
        valIsSet = defIsSet;
        str = @"";
        strIsSet = defIsSet;
    }

    return self;

}

@end
@implementation setPinArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"setPinArg"

@synthesize pinSettingIsSet;
- (PinSetting *)getPinSetting
{
    return pinSetting;
}

- (void)setPinSetting:(PinSetting *)_pinSetting
{
    pinSetting = _pinSetting;
    pinSettingIsSet = (_pinSetting != nil) ? YES : NO;
}


+ (setPinArg *)deserialiseFromString: (NSString *)string
{
    return [setPinArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (setPinArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    setPinArg *inst = [[setPinArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setPinSetting:[PinSetting deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setPinSetting:nil];
        }
    }
    if([inst getPinSetting] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (setPinArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [setPinArg fromJSONString:jsonString error:&_localErr];
}

+ (setPinArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [setPinArg fromJSONObject:gjo error:err];
    }
}

+ (setPinArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [setPinArg fromJSONObject:jsonObj error:&_localErr];
}

+ (setPinArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    setPinArg *inst = [[setPinArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        PinSetting *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"pinSetting" error:_err]) != nil){
            if((_objInst = [PinSetting fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'pinSetting' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'pinSetting' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.pinSetting = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'pinSetting' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(pinSettingIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"pinSetting"], [pinSetting toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(pinSettingIsSet){
        [_str appendString:[pinSetting serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (setPinArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        pinSetting = [[PinSetting alloc] initWithIsSet:defIsSet];
        pinSettingIsSet = defIsSet;
    }

    return self;

}

@end
@implementation IOState

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"IOState"

@synthesize ledStateIsSet;
- (NSInteger)getLedState
{
    return ledState;
}

- (void)setLedState:(NSInteger )_ledState
{
    ledState = _ledState;
    ledStateIsSet = YES;
}


+ (IOState *)deserialiseFromString: (NSString *)string
{
    return [IOState deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (IOState *)deserialiseFromPayload: (GolgiPayload *)payload
{
    IOState *inst = [[IOState alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.ledState = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (IOState *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [IOState fromJSONString:jsonString error:&_localErr];
}

+ (IOState *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [IOState fromJSONObject:gjo error:err];
    }
}

+ (IOState *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [IOState fromJSONObject:jsonObj error:&_localErr];
}

+ (IOState *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    IOState *inst = [[IOState alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"ledState" error:_err]) != nil){
            inst.ledState = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'ledState' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'ledState' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(ledStateIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"ledState"], (long)ledState];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(ledStateIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)ledState];
    }

    return [NSString stringWithString:_str];
}

- (IOState *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        ledStateIsSet = defIsSet;
    }

    return self;

}

@end
@implementation PotValue

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"PotValue"

@synthesize vIsSet;
- (NSInteger)getV
{
    return v;
}

- (void)setV:(NSInteger )_v
{
    v = _v;
    vIsSet = YES;
}


+ (PotValue *)deserialiseFromString: (NSString *)string
{
    return [PotValue deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (PotValue *)deserialiseFromPayload: (GolgiPayload *)payload
{
    PotValue *inst = [[PotValue alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.v = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (PotValue *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [PotValue fromJSONString:jsonString error:&_localErr];
}

+ (PotValue *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [PotValue fromJSONObject:gjo error:err];
    }
}

+ (PotValue *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [PotValue fromJSONObject:jsonObj error:&_localErr];
}

+ (PotValue *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    PotValue *inst = [[PotValue alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"v" error:_err]) != nil){
            inst.v = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'v' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'v' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(vIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"v"], (long)v];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(vIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)v];
    }

    return [NSString stringWithString:_str];
}

- (PotValue *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        vIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_setPin_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setPin_reqArg"

@synthesize settingIsSet;
- (PinSetting *)getSetting
{
    return setting;
}

- (void)setSetting:(PinSetting *)_setting
{
    setting = _setting;
    settingIsSet = (_setting != nil) ? YES : NO;
}


+ (GolDuino_setPin_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setPin_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setPin_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setPin_reqArg *inst = [[GolDuino_setPin_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setSetting:[PinSetting deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setSetting:nil];
        }
    }
    if([inst getSetting] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setPin_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPin_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setPin_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setPin_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setPin_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPin_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setPin_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setPin_reqArg *inst = [[GolDuino_setPin_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        PinSetting *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"setting" error:_err]) != nil){
            if((_objInst = [PinSetting fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'setting' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'setting' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.setting = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'setting' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(settingIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"setting"], [setting toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(settingIsSet){
        [_str appendString:[setting serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setPin_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        setting = [[PinSetting alloc] initWithIsSet:defIsSet];
        settingIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_setPin_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setPin_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize resultIsSet;
- (PinSetting *)getResult
{
    return result;
}

- (void)setResult:(PinSetting *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_setPin_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setPin_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setPin_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setPin_rspArg *inst = [[GolDuino_setPin_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[PinSetting deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setPin_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPin_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setPin_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setPin_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setPin_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPin_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setPin_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setPin_rspArg *inst = [[GolDuino_setPin_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        PinSetting *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"result" error:_err]) != nil){
            if((_objInst = [PinSetting fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.result = _objInst;
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(resultIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"result"], [result toJSON]];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setPin_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[PinSetting alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuino_setIO_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setIO_reqArg"

@synthesize ioStateIsSet;
- (IOState *)getIoState
{
    return ioState;
}

- (void)setIoState:(IOState *)_ioState
{
    ioState = _ioState;
    ioStateIsSet = (_ioState != nil) ? YES : NO;
}


+ (GolDuino_setIO_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setIO_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setIO_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setIO_reqArg *inst = [[GolDuino_setIO_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setIoState:[IOState deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setIoState:nil];
        }
    }
    if([inst getIoState] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setIO_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setIO_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setIO_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setIO_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setIO_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setIO_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setIO_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setIO_reqArg *inst = [[GolDuino_setIO_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        IOState *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"ioState" error:_err]) != nil){
            if((_objInst = [IOState fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'ioState' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'ioState' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.ioState = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'ioState' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(ioStateIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"ioState"], [ioState toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(ioStateIsSet){
        [_str appendString:[ioState serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setIO_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        ioState = [[IOState alloc] initWithIsSet:defIsSet];
        ioStateIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_setIO_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setIO_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_setIO_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setIO_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setIO_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setIO_rspArg *inst = [[GolDuino_setIO_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setIO_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setIO_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setIO_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setIO_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setIO_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setIO_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setIO_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setIO_rspArg *inst = [[GolDuino_setIO_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setIO_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuino_buttonPressed_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_buttonPressed_reqArg"

@synthesize tIsSet;
- (NSInteger)getT
{
    return t;
}

- (void)setT:(NSInteger )_t
{
    t = _t;
    tIsSet = YES;
}


+ (GolDuino_buttonPressed_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_buttonPressed_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_buttonPressed_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_buttonPressed_reqArg *inst = [[GolDuino_buttonPressed_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.t = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_buttonPressed_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonPressed_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_buttonPressed_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_buttonPressed_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_buttonPressed_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonPressed_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_buttonPressed_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_buttonPressed_reqArg *inst = [[GolDuino_buttonPressed_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"t" error:_err]) != nil){
            inst.t = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 't' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 't' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(tIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"t"], (long)t];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)t];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_buttonPressed_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        tIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_buttonPressed_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_buttonPressed_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_buttonPressed_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_buttonPressed_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_buttonPressed_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_buttonPressed_rspArg *inst = [[GolDuino_buttonPressed_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_buttonPressed_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonPressed_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_buttonPressed_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_buttonPressed_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_buttonPressed_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonPressed_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_buttonPressed_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_buttonPressed_rspArg *inst = [[GolDuino_buttonPressed_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_buttonPressed_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuino_buttonReleased_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_buttonReleased_reqArg"

@synthesize tIsSet;
- (NSInteger)getT
{
    return t;
}

- (void)setT:(NSInteger )_t
{
    t = _t;
    tIsSet = YES;
}


+ (GolDuino_buttonReleased_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_buttonReleased_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_buttonReleased_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_buttonReleased_reqArg *inst = [[GolDuino_buttonReleased_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.t = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_buttonReleased_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonReleased_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_buttonReleased_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_buttonReleased_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_buttonReleased_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonReleased_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_buttonReleased_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_buttonReleased_reqArg *inst = [[GolDuino_buttonReleased_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"t" error:_err]) != nil){
            inst.t = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 't' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 't' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(tIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"t"], (long)t];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)t];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_buttonReleased_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        tIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_buttonReleased_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_buttonReleased_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_buttonReleased_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_buttonReleased_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_buttonReleased_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_buttonReleased_rspArg *inst = [[GolDuino_buttonReleased_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_buttonReleased_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonReleased_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_buttonReleased_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_buttonReleased_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_buttonReleased_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_buttonReleased_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_buttonReleased_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_buttonReleased_rspArg *inst = [[GolDuino_buttonReleased_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_buttonReleased_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuino_setPotValue_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setPotValue_reqArg"

@synthesize vIsSet;
- (NSInteger)getV
{
    return v;
}

- (void)setV:(NSInteger )_v
{
    v = _v;
    vIsSet = YES;
}


+ (GolDuino_setPotValue_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setPotValue_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setPotValue_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setPotValue_reqArg *inst = [[GolDuino_setPotValue_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.v = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setPotValue_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPotValue_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setPotValue_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setPotValue_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setPotValue_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPotValue_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setPotValue_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setPotValue_reqArg *inst = [[GolDuino_setPotValue_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"v" error:_err]) != nil){
            inst.v = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'v' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'v' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(vIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"v"], (long)v];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(vIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)v];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setPotValue_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        vIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_setPotValue_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_setPotValue_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_setPotValue_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_setPotValue_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_setPotValue_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_setPotValue_rspArg *inst = [[GolDuino_setPotValue_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_setPotValue_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPotValue_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_setPotValue_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_setPotValue_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_setPotValue_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_setPotValue_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_setPotValue_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_setPotValue_rspArg *inst = [[GolDuino_setPotValue_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_setPotValue_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuino_getPotValue_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_getPotValue_reqArg"

@synthesize pookyIsSet;
- (NSInteger)getPooky
{
    return pooky;
}

- (void)setPooky:(NSInteger )_pooky
{
    pooky = _pooky;
    pookyIsSet = YES;
}


+ (GolDuino_getPotValue_reqArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_getPotValue_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_getPotValue_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_getPotValue_reqArg *inst = [[GolDuino_getPotValue_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.pooky = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_getPotValue_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_getPotValue_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_getPotValue_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_getPotValue_reqArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_getPotValue_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_getPotValue_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_getPotValue_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_getPotValue_reqArg *inst = [[GolDuino_getPotValue_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"pooky" error:_err]) != nil){
            inst.pooky = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'pooky' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'pooky' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(pookyIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"pooky"], (long)pooky];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(pookyIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)pooky];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_getPotValue_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        pookyIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GolDuino_getPotValue_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GolDuino_getPotValue_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize resultIsSet;
- (PotValue *)getResult
{
    return result;
}

- (void)setResult:(PotValue *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (GolDuino_getPotValue_rspArg *)deserialiseFromString: (NSString *)string
{
    return [GolDuino_getPotValue_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GolDuino_getPotValue_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GolDuino_getPotValue_rspArg *inst = [[GolDuino_getPotValue_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[PotValue deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GolDuino_getPotValue_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GolDuino_getPotValue_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (GolDuino_getPotValue_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GolDuino_getPotValue_rspArg fromJSONObject:gjo error:err];
    }
}

+ (GolDuino_getPotValue_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GolDuino_getPotValue_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (GolDuino_getPotValue_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GolDuino_getPotValue_rspArg *inst = [[GolDuino_getPotValue_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        PotValue *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"result" error:_err]) != nil){
            if((_objInst = [PotValue fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.result = _objInst;
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(resultIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"result"], [result toJSON]];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (GolDuino_getPotValue_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[PotValue alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation GolDuinoSetPinExceptionBundle
@synthesize golgiException;
- (GolDuinoSetPinExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SetPinInternalResultSender : NSObject <GolDuinoSetPinResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_setPin_rspArg *rsp;
}
- (SetPinInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SetPinInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SetPinInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_setPin_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"setPin.GolDuino" withMessageId:msgId];
}

- (void)successWithResult:(PinSetting *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface SetPinInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoSetPinRequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoSetPinResultSender> resultSender, PinSetting * setting);
}

- (SetPinInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetPinRequestReceiver>)receiver;
- (SetPinInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetPinResultSender> resultSender, PinSetting * setting))userHandler;
@end

@implementation SetPinInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_setPin_reqArg *req = [GolDuino_setPin_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"setPin.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        SetPinInternalResultSender *resultSender;
        resultSender = [SetPinInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver setPinWithResultSender:resultSender andSetting:[req getSetting]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getSetting]);    }
    }
}

- (SetPinInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetPinRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SetPinInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetPinResultSender> resultSender, PinSetting * setting))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SetPinInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoSetPinResultReceiver> receiver;
    void (^handler)(PinSetting *Result,GolDuinoSetPinExceptionBundle *exceptionBundle);
}

- (SetPinInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetPinResultReceiver>)receiver orHandler:(void (^)(PinSetting *Result,GolDuinoSetPinExceptionBundle *exceptionBundle))handler;
@end
@implementation SetPinInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_setPin_rspArg *rsp = [GolDuino_setPin_rspArg deserialiseFromString:payload];
    GolDuinoSetPinExceptionBundle *exBundle = [[GolDuinoSetPinExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'setPin' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SetPinInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetPinResultReceiver>)_receiver orHandler:(void (^)(PinSetting *Result,GolDuinoSetPinExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation GolDuinoSetIOExceptionBundle
@synthesize golgiException;
- (GolDuinoSetIOExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SetIOInternalResultSender : NSObject <GolDuinoSetIOResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_setIO_rspArg *rsp;
}
- (SetIOInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SetIOInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SetIOInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_setIO_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"setIO.GolDuino" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface SetIOInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoSetIORequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoSetIOResultSender> resultSender, IOState * ioState);
}

- (SetIOInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetIORequestReceiver>)receiver;
- (SetIOInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetIOResultSender> resultSender, IOState * ioState))userHandler;
@end

@implementation SetIOInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_setIO_reqArg *req = [GolDuino_setIO_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"setIO.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        SetIOInternalResultSender *resultSender;
        resultSender = [SetIOInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver setIOWithResultSender:resultSender andIoState:[req getIoState]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getIoState]);    }
    }
}

- (SetIOInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetIORequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SetIOInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetIOResultSender> resultSender, IOState * ioState))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SetIOInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoSetIOResultReceiver> receiver;
    void (^handler)(GolDuinoSetIOExceptionBundle *exceptionBundle);
}

- (SetIOInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetIOResultReceiver>)receiver orHandler:(void (^)(GolDuinoSetIOExceptionBundle *exceptionBundle))handler;
@end
@implementation SetIOInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_setIO_rspArg *rsp = [GolDuino_setIO_rspArg deserialiseFromString:payload];
    GolDuinoSetIOExceptionBundle *exBundle = [[GolDuinoSetIOExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'setIO' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SetIOInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetIOResultReceiver>)_receiver orHandler:(void (^)(GolDuinoSetIOExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation GolDuinoButtonPressedExceptionBundle
@synthesize golgiException;
- (GolDuinoButtonPressedExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface ButtonPressedInternalResultSender : NSObject <GolDuinoButtonPressedResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_buttonPressed_rspArg *rsp;
}
- (ButtonPressedInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation ButtonPressedInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (ButtonPressedInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_buttonPressed_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"buttonPressed.GolDuino" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface ButtonPressedInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoButtonPressedRequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoButtonPressedResultSender> resultSender, NSInteger t);
}

- (ButtonPressedInternalRequestHandler *)initWithReceiver:(id<GolDuinoButtonPressedRequestReceiver>)receiver;
- (ButtonPressedInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoButtonPressedResultSender> resultSender, NSInteger t))userHandler;
@end

@implementation ButtonPressedInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_buttonPressed_reqArg *req = [GolDuino_buttonPressed_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"buttonPressed.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        ButtonPressedInternalResultSender *resultSender;
        resultSender = [ButtonPressedInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver buttonPressedWithResultSender:resultSender andT:[req getT]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getT]);    }
    }
}

- (ButtonPressedInternalRequestHandler *)initWithReceiver:(id<GolDuinoButtonPressedRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (ButtonPressedInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoButtonPressedResultSender> resultSender, NSInteger t))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface ButtonPressedInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoButtonPressedResultReceiver> receiver;
    void (^handler)(GolDuinoButtonPressedExceptionBundle *exceptionBundle);
}

- (ButtonPressedInternalResponseHandler *)initWithReceiver:(id<GolDuinoButtonPressedResultReceiver>)receiver orHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *exceptionBundle))handler;
@end
@implementation ButtonPressedInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_buttonPressed_rspArg *rsp = [GolDuino_buttonPressed_rspArg deserialiseFromString:payload];
    GolDuinoButtonPressedExceptionBundle *exBundle = [[GolDuinoButtonPressedExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'buttonPressed' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (ButtonPressedInternalResponseHandler *)initWithReceiver:(id<GolDuinoButtonPressedResultReceiver>)_receiver orHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation GolDuinoButtonReleasedExceptionBundle
@synthesize golgiException;
- (GolDuinoButtonReleasedExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface ButtonReleasedInternalResultSender : NSObject <GolDuinoButtonReleasedResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_buttonReleased_rspArg *rsp;
}
- (ButtonReleasedInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation ButtonReleasedInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (ButtonReleasedInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_buttonReleased_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"buttonReleased.GolDuino" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface ButtonReleasedInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoButtonReleasedRequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoButtonReleasedResultSender> resultSender, NSInteger t);
}

- (ButtonReleasedInternalRequestHandler *)initWithReceiver:(id<GolDuinoButtonReleasedRequestReceiver>)receiver;
- (ButtonReleasedInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoButtonReleasedResultSender> resultSender, NSInteger t))userHandler;
@end

@implementation ButtonReleasedInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_buttonReleased_reqArg *req = [GolDuino_buttonReleased_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"buttonReleased.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        ButtonReleasedInternalResultSender *resultSender;
        resultSender = [ButtonReleasedInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver buttonReleasedWithResultSender:resultSender andT:[req getT]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getT]);    }
    }
}

- (ButtonReleasedInternalRequestHandler *)initWithReceiver:(id<GolDuinoButtonReleasedRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (ButtonReleasedInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoButtonReleasedResultSender> resultSender, NSInteger t))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface ButtonReleasedInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoButtonReleasedResultReceiver> receiver;
    void (^handler)(GolDuinoButtonReleasedExceptionBundle *exceptionBundle);
}

- (ButtonReleasedInternalResponseHandler *)initWithReceiver:(id<GolDuinoButtonReleasedResultReceiver>)receiver orHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *exceptionBundle))handler;
@end
@implementation ButtonReleasedInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_buttonReleased_rspArg *rsp = [GolDuino_buttonReleased_rspArg deserialiseFromString:payload];
    GolDuinoButtonReleasedExceptionBundle *exBundle = [[GolDuinoButtonReleasedExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'buttonReleased' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (ButtonReleasedInternalResponseHandler *)initWithReceiver:(id<GolDuinoButtonReleasedResultReceiver>)_receiver orHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation GolDuinoSetPotValueExceptionBundle
@synthesize golgiException;
- (GolDuinoSetPotValueExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SetPotValueInternalResultSender : NSObject <GolDuinoSetPotValueResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_setPotValue_rspArg *rsp;
}
- (SetPotValueInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SetPotValueInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SetPotValueInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_setPotValue_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"setPotValue.GolDuino" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface SetPotValueInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoSetPotValueRequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoSetPotValueResultSender> resultSender, NSInteger v);
}

- (SetPotValueInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetPotValueRequestReceiver>)receiver;
- (SetPotValueInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetPotValueResultSender> resultSender, NSInteger v))userHandler;
@end

@implementation SetPotValueInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_setPotValue_reqArg *req = [GolDuino_setPotValue_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"setPotValue.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        SetPotValueInternalResultSender *resultSender;
        resultSender = [SetPotValueInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver setPotValueWithResultSender:resultSender andV:[req getV]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getV]);    }
    }
}

- (SetPotValueInternalRequestHandler *)initWithReceiver:(id<GolDuinoSetPotValueRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SetPotValueInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoSetPotValueResultSender> resultSender, NSInteger v))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SetPotValueInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoSetPotValueResultReceiver> receiver;
    void (^handler)(GolDuinoSetPotValueExceptionBundle *exceptionBundle);
}

- (SetPotValueInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetPotValueResultReceiver>)receiver orHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *exceptionBundle))handler;
@end
@implementation SetPotValueInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_setPotValue_rspArg *rsp = [GolDuino_setPotValue_rspArg deserialiseFromString:payload];
    GolDuinoSetPotValueExceptionBundle *exBundle = [[GolDuinoSetPotValueExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'setPotValue' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SetPotValueInternalResponseHandler *)initWithReceiver:(id<GolDuinoSetPotValueResultReceiver>)_receiver orHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation GolDuinoGetPotValueExceptionBundle
@synthesize golgiException;
- (GolDuinoGetPotValueExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface GetPotValueInternalResultSender : NSObject <GolDuinoGetPotValueResultSender>
{
    NSString *sender;
    NSString *msgId;
    GolDuino_getPotValue_rspArg *rsp;
}
- (GetPotValueInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation GetPotValueInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (GetPotValueInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[GolDuino_getPotValue_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"getPotValue.GolDuino" withMessageId:msgId];
}

- (void)successWithResult:(PotValue *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface GetPotValueInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<GolDuinoGetPotValueRequestReceiver> receiver;
    void (^userHandler)(id<GolDuinoGetPotValueResultSender> resultSender, NSInteger pooky);
}

- (GetPotValueInternalRequestHandler *)initWithReceiver:(id<GolDuinoGetPotValueRequestReceiver>)receiver;
- (GetPotValueInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoGetPotValueResultSender> resultSender, NSInteger pooky))userHandler;
@end

@implementation GetPotValueInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    GolDuino_getPotValue_reqArg *req = [GolDuino_getPotValue_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"getPotValue.GolDuino" withMessageId:msgId];
    }
    else{
        // Process req here
        GetPotValueInternalResultSender *resultSender;
        resultSender = [GetPotValueInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver getPotValueWithResultSender:resultSender andPooky:[req getPooky]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getPooky]);    }
    }
}

- (GetPotValueInternalRequestHandler *)initWithReceiver:(id<GolDuinoGetPotValueRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (GetPotValueInternalRequestHandler *)initWithHandler:(void (^)(id<GolDuinoGetPotValueResultSender> resultSender, NSInteger pooky))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface GetPotValueInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<GolDuinoGetPotValueResultReceiver> receiver;
    void (^handler)(PotValue *Result,GolDuinoGetPotValueExceptionBundle *exceptionBundle);
}

- (GetPotValueInternalResponseHandler *)initWithReceiver:(id<GolDuinoGetPotValueResultReceiver>)receiver orHandler:(void (^)(PotValue *Result,GolDuinoGetPotValueExceptionBundle *exceptionBundle))handler;
@end
@implementation GetPotValueInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    GolDuino_getPotValue_rspArg *rsp = [GolDuino_getPotValue_rspArg deserialiseFromString:payload];
    GolDuinoGetPotValueExceptionBundle *exBundle = [[GolDuinoGetPotValueExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'getPotValue' in Golgi Service 'GolDuino' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (GetPotValueInternalResponseHandler *)initWithReceiver:(id<GolDuinoGetPotValueResultReceiver>)_receiver orHandler:(void (^)(PotValue *Result,GolDuinoGetPotValueExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation GolDuinoSvc
//
// setPin
//
+ (void)sendSetPinUsingResultHandler:(void (^)(PinSetting *, GolDuinoSetPinExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withSetting:(PinSetting *)setting
{
    [self sendSetPinUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withSetting:setting];
}

+ (void)sendSetPinUsingResultHandler:(void (^)(PinSetting *, GolDuinoSetPinExceptionBundle *))resultHandler andDestination:(NSString *)_dst withSetting:(PinSetting *)setting
{
    [self sendSetPinUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withSetting:setting];
}

+ (void)sendSetPinUsingResultReceiver:(id<GolDuinoSetPinResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withSetting:(PinSetting *)setting
{
    [self sendSetPinUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withSetting:setting];
}

+ (void)sendSetPinUsingResultReceiver:(id<GolDuinoSetPinResultReceiver>)resultReceiver andDestination:(NSString *)_dst withSetting:(PinSetting *)setting
{
    [self sendSetPinUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withSetting:setting];
}

//
// setPin with transport options and receiver/handler
//
+ (void)sendSetPinUsingResultReceiver:(id<GolDuinoSetPinResultReceiver>)resultReceiver orResultHandler:(void (^)(PinSetting *, GolDuinoSetPinExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withSetting:(PinSetting *)setting
{
    NSString *_payload;
    GolDuino_setPin_reqArg *_reqArg = [[GolDuino_setPin_reqArg alloc] init];
    SetPinInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SetPinInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setSetting:setting];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"setPin.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// setPin using closure
//
// + (void)sendSetPinUsingResultHandler:(void (^)(PinSetting *, GolDuinoSetPinExceptionBundle *))resultHandler andDestination:(NSString *)_dst withSetting:(PinSetting *)setting

+ (void)registerSetPinRequestReceiver:(id<GolDuinoSetPinRequestReceiver>)requestReceiver
{
    SetPinInternalRequestHandler *reqHandler;
    reqHandler = [SetPinInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setPin.GolDuino"];
}

+ (void)registerSetPinRequestHandler:(void (^)(id<GolDuinoSetPinResultSender> resultSender, PinSetting * setting))requestHandler;
{
    SetPinInternalRequestHandler *reqHandler;
    reqHandler = [SetPinInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setPin.GolDuino"];
}

//
// setIO
//
+ (void)sendSetIOUsingResultHandler:(void (^)(GolDuinoSetIOExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withIoState:(IOState *)ioState
{
    [self sendSetIOUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withIoState:ioState];
}

+ (void)sendSetIOUsingResultHandler:(void (^)(GolDuinoSetIOExceptionBundle *))resultHandler andDestination:(NSString *)_dst withIoState:(IOState *)ioState
{
    [self sendSetIOUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withIoState:ioState];
}

+ (void)sendSetIOUsingResultReceiver:(id<GolDuinoSetIOResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withIoState:(IOState *)ioState
{
    [self sendSetIOUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withIoState:ioState];
}

+ (void)sendSetIOUsingResultReceiver:(id<GolDuinoSetIOResultReceiver>)resultReceiver andDestination:(NSString *)_dst withIoState:(IOState *)ioState
{
    [self sendSetIOUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withIoState:ioState];
}

//
// setIO with transport options and receiver/handler
//
+ (void)sendSetIOUsingResultReceiver:(id<GolDuinoSetIOResultReceiver>)resultReceiver orResultHandler:(void (^)(GolDuinoSetIOExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withIoState:(IOState *)ioState
{
    NSString *_payload;
    GolDuino_setIO_reqArg *_reqArg = [[GolDuino_setIO_reqArg alloc] init];
    SetIOInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SetIOInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setIoState:ioState];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"setIO.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// setIO using closure
//
// + (void)sendSetIOUsingResultHandler:(void (^)(GolDuinoSetIOExceptionBundle *))resultHandler andDestination:(NSString *)_dst withIoState:(IOState *)ioState

+ (void)registerSetIORequestReceiver:(id<GolDuinoSetIORequestReceiver>)requestReceiver
{
    SetIOInternalRequestHandler *reqHandler;
    reqHandler = [SetIOInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setIO.GolDuino"];
}

+ (void)registerSetIORequestHandler:(void (^)(id<GolDuinoSetIOResultSender> resultSender, IOState * ioState))requestHandler;
{
    SetIOInternalRequestHandler *reqHandler;
    reqHandler = [SetIOInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setIO.GolDuino"];
}

//
// buttonPressed
//
+ (void)sendButtonPressedUsingResultHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonPressedUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonPressedUsingResultHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonPressedUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonPressedUsingResultReceiver:(id<GolDuinoButtonPressedResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonPressedUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonPressedUsingResultReceiver:(id<GolDuinoButtonPressedResultReceiver>)resultReceiver andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonPressedUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withT:t];
}

//
// buttonPressed with transport options and receiver/handler
//
+ (void)sendButtonPressedUsingResultReceiver:(id<GolDuinoButtonPressedResultReceiver>)resultReceiver orResultHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    NSString *_payload;
    GolDuino_buttonPressed_reqArg *_reqArg = [[GolDuino_buttonPressed_reqArg alloc] init];
    ButtonPressedInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [ButtonPressedInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setT:t];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"buttonPressed.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// buttonPressed using closure
//
// + (void)sendButtonPressedUsingResultHandler:(void (^)(GolDuinoButtonPressedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withT:(NSInteger)t

+ (void)registerButtonPressedRequestReceiver:(id<GolDuinoButtonPressedRequestReceiver>)requestReceiver
{
    ButtonPressedInternalRequestHandler *reqHandler;
    reqHandler = [ButtonPressedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"buttonPressed.GolDuino"];
}

+ (void)registerButtonPressedRequestHandler:(void (^)(id<GolDuinoButtonPressedResultSender> resultSender, NSInteger t))requestHandler;
{
    ButtonPressedInternalRequestHandler *reqHandler;
    reqHandler = [ButtonPressedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"buttonPressed.GolDuino"];
}

//
// buttonReleased
//
+ (void)sendButtonReleasedUsingResultHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonReleasedUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonReleasedUsingResultHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonReleasedUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonReleasedUsingResultReceiver:(id<GolDuinoButtonReleasedResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonReleasedUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withT:t];
}

+ (void)sendButtonReleasedUsingResultReceiver:(id<GolDuinoButtonReleasedResultReceiver>)resultReceiver andDestination:(NSString *)_dst withT:(NSInteger)t
{
    [self sendButtonReleasedUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withT:t];
}

//
// buttonReleased with transport options and receiver/handler
//
+ (void)sendButtonReleasedUsingResultReceiver:(id<GolDuinoButtonReleasedResultReceiver>)resultReceiver orResultHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withT:(NSInteger)t
{
    NSString *_payload;
    GolDuino_buttonReleased_reqArg *_reqArg = [[GolDuino_buttonReleased_reqArg alloc] init];
    ButtonReleasedInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [ButtonReleasedInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setT:t];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"buttonReleased.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// buttonReleased using closure
//
// + (void)sendButtonReleasedUsingResultHandler:(void (^)(GolDuinoButtonReleasedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withT:(NSInteger)t

+ (void)registerButtonReleasedRequestReceiver:(id<GolDuinoButtonReleasedRequestReceiver>)requestReceiver
{
    ButtonReleasedInternalRequestHandler *reqHandler;
    reqHandler = [ButtonReleasedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"buttonReleased.GolDuino"];
}

+ (void)registerButtonReleasedRequestHandler:(void (^)(id<GolDuinoButtonReleasedResultSender> resultSender, NSInteger t))requestHandler;
{
    ButtonReleasedInternalRequestHandler *reqHandler;
    reqHandler = [ButtonReleasedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"buttonReleased.GolDuino"];
}

//
// setPotValue
//
+ (void)sendSetPotValueUsingResultHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withV:(NSInteger)v
{
    [self sendSetPotValueUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withV:v];
}

+ (void)sendSetPotValueUsingResultHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *))resultHandler andDestination:(NSString *)_dst withV:(NSInteger)v
{
    [self sendSetPotValueUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withV:v];
}

+ (void)sendSetPotValueUsingResultReceiver:(id<GolDuinoSetPotValueResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withV:(NSInteger)v
{
    [self sendSetPotValueUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withV:v];
}

+ (void)sendSetPotValueUsingResultReceiver:(id<GolDuinoSetPotValueResultReceiver>)resultReceiver andDestination:(NSString *)_dst withV:(NSInteger)v
{
    [self sendSetPotValueUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withV:v];
}

//
// setPotValue with transport options and receiver/handler
//
+ (void)sendSetPotValueUsingResultReceiver:(id<GolDuinoSetPotValueResultReceiver>)resultReceiver orResultHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withV:(NSInteger)v
{
    NSString *_payload;
    GolDuino_setPotValue_reqArg *_reqArg = [[GolDuino_setPotValue_reqArg alloc] init];
    SetPotValueInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SetPotValueInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setV:v];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"setPotValue.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// setPotValue using closure
//
// + (void)sendSetPotValueUsingResultHandler:(void (^)(GolDuinoSetPotValueExceptionBundle *))resultHandler andDestination:(NSString *)_dst withV:(NSInteger)v

+ (void)registerSetPotValueRequestReceiver:(id<GolDuinoSetPotValueRequestReceiver>)requestReceiver
{
    SetPotValueInternalRequestHandler *reqHandler;
    reqHandler = [SetPotValueInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setPotValue.GolDuino"];
}

+ (void)registerSetPotValueRequestHandler:(void (^)(id<GolDuinoSetPotValueResultSender> resultSender, NSInteger v))requestHandler;
{
    SetPotValueInternalRequestHandler *reqHandler;
    reqHandler = [SetPotValueInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setPotValue.GolDuino"];
}

//
// getPotValue
//
+ (void)sendGetPotValueUsingResultHandler:(void (^)(PotValue *, GolDuinoGetPotValueExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetPotValueUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetPotValueUsingResultHandler:(void (^)(PotValue *, GolDuinoGetPotValueExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetPotValueUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetPotValueUsingResultReceiver:(id<GolDuinoGetPotValueResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetPotValueUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetPotValueUsingResultReceiver:(id<GolDuinoGetPotValueResultReceiver>)resultReceiver andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetPotValueUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withPooky:pooky];
}

//
// getPotValue with transport options and receiver/handler
//
+ (void)sendGetPotValueUsingResultReceiver:(id<GolDuinoGetPotValueResultReceiver>)resultReceiver orResultHandler:(void (^)(PotValue *, GolDuinoGetPotValueExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    NSString *_payload;
    GolDuino_getPotValue_reqArg *_reqArg = [[GolDuino_getPotValue_reqArg alloc] init];
    GetPotValueInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [GetPotValueInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setPooky:pooky];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"getPotValue.GolDuino" andResponseHandler:_iRspHndlr];

}

//
// getPotValue using closure
//
// + (void)sendGetPotValueUsingResultHandler:(void (^)(PotValue *, GolDuinoGetPotValueExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPooky:(NSInteger)pooky

+ (void)registerGetPotValueRequestReceiver:(id<GolDuinoGetPotValueRequestReceiver>)requestReceiver
{
    GetPotValueInternalRequestHandler *reqHandler;
    reqHandler = [GetPotValueInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getPotValue.GolDuino"];
}

+ (void)registerGetPotValueRequestHandler:(void (^)(id<GolDuinoGetPotValueResultSender> resultSender, NSInteger pooky))requestHandler;
{
    GetPotValueInternalRequestHandler *reqHandler;
    reqHandler = [GetPotValueInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getPotValue.GolDuino"];
}

@end
