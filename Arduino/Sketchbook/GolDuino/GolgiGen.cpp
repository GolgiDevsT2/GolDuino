/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#include "GolgiGen.h"


PinSetting::PinSetting(void){
    initialise(true);
}

PinSetting::PinSetting(bool isSetDefault){
    initialise(isSetDefault);
}

void PinSetting::initialise(bool isSetDefault){
    _corrupt = false;

    _pinIsSet = isSetDefault;
    _pin = 0;

    _valIsSet = isSetDefault;
    _val = 0;

    _strIsSet = isSetDefault;
    _str = strdup("");

}

PinSetting *PinSetting::dupe(void){
    PinSetting*dupedInst = new PinSetting();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (PinSetting *)NULL;
    }
    return dupedInst;
}

PinSetting::~PinSetting(void){


    free((void *)_str);

}

bool PinSetting::isCorrupt(void){
    return _corrupt;
}

bool PinSetting::pinIsSet(void){
    return _pinIsSet;
}

int32_t PinSetting::getPin(void){
    return _pin;
}

void PinSetting::setPin(int32_t val){
    _pinIsSet = true;
    _pin = val;
}

bool PinSetting::valIsSet(void){
    return _valIsSet;
}

int32_t PinSetting::getVal(void){
    return _val;
}

void PinSetting::setVal(int32_t val){
    _valIsSet = true;
    _val = val;
}

bool PinSetting::strIsSet(void){
    return _strIsSet;
}

const char *PinSetting::getStr(void){
    return _str;
}

void PinSetting::setStr(const char *val){
    _strIsSet = true;
    free((void *)_str);
    _str = strdup(val);
}

bool PinSetting::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setPin(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("2", &notfound);
            if(!notfound){
                setVal(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

        if(err == 0){
            int32_t notfound = 0;
            const char *sval = gp->getString("3", &notfound);
            if(!notfound){
                setStr(sval);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *PinSetting::encode(void){
    return encodeWithPrefix(NULL);
}

const char *PinSetting::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_pinIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_pin));
        dst = tbxStrcat(dst, "\n");
    }
    if(_valIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "2: ");
        dst = tbxStrcat(dst, tbxItos(_val));
        dst = tbxStrcat(dst, "\n");
    }
    if(_strIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "3: \"");
        dst = tbxStrcat(dst, tbxEscapeString(_str));
        dst = tbxStrcat(dst, "\"\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


setPinArg::setPinArg(void){
    initialise(true);
}

setPinArg::setPinArg(bool isSetDefault){
    initialise(isSetDefault);
}

void setPinArg::initialise(bool isSetDefault){
    _corrupt = false;

    _pinSetting = new PinSetting(isSetDefault);
    _pinSettingIsSet = isSetDefault;

}

setPinArg *setPinArg::dupe(void){
    setPinArg*dupedInst = new setPinArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (setPinArg *)NULL;
    }
    return dupedInst;
}

setPinArg::~setPinArg(void){
    if(_pinSetting != NULL){
        delete _pinSetting;
    }

}

bool setPinArg::isCorrupt(void){
    return _corrupt;
}

bool setPinArg::pinSettingIsSet(void){
    return _pinSettingIsSet;
}

PinSetting *setPinArg::getPinSetting(void){
    return _pinSetting;
}

void setPinArg::setPinSetting(PinSetting*val){
    _pinSettingIsSet = true;
    if(_pinSetting != NULL){
        delete _pinSetting;
    }
    _pinSetting = val->dupe();
}

bool setPinArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("1");
            PinSetting *nestedType = new PinSetting();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setPinSetting(nestedType);
            }
            else{
                delete nestedType;
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *setPinArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *setPinArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_pinSettingIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".1");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "1");
        }
        dst = tbxStrcat(dst, _pinSetting->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


IOState::IOState(void){
    initialise(true);
}

IOState::IOState(bool isSetDefault){
    initialise(isSetDefault);
}

void IOState::initialise(bool isSetDefault){
    _corrupt = false;

    _ledStateIsSet = isSetDefault;
    _ledState = 0;

}

IOState *IOState::dupe(void){
    IOState*dupedInst = new IOState();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (IOState *)NULL;
    }
    return dupedInst;
}

IOState::~IOState(void){

}

bool IOState::isCorrupt(void){
    return _corrupt;
}

bool IOState::ledStateIsSet(void){
    return _ledStateIsSet;
}

int32_t IOState::getLedState(void){
    return _ledState;
}

void IOState::setLedState(int32_t val){
    _ledStateIsSet = true;
    _ledState = val;
}

bool IOState::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setLedState(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *IOState::encode(void){
    return encodeWithPrefix(NULL);
}

const char *IOState::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_ledStateIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_ledState));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


PotValue::PotValue(void){
    initialise(true);
}

PotValue::PotValue(bool isSetDefault){
    initialise(isSetDefault);
}

void PotValue::initialise(bool isSetDefault){
    _corrupt = false;

    _vIsSet = isSetDefault;
    _v = 0;

}

PotValue *PotValue::dupe(void){
    PotValue*dupedInst = new PotValue();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (PotValue *)NULL;
    }
    return dupedInst;
}

PotValue::~PotValue(void){

}

bool PotValue::isCorrupt(void){
    return _corrupt;
}

bool PotValue::vIsSet(void){
    return _vIsSet;
}

int32_t PotValue::getV(void){
    return _v;
}

void PotValue::setV(int32_t val){
    _vIsSet = true;
    _v = val;
}

bool PotValue::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setV(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *PotValue::encode(void){
    return encodeWithPrefix(NULL);
}

const char *PotValue::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_vIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_v));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setPin_reqArg::GolDuino_setPin_reqArg(void){
    initialise(true);
}

GolDuino_setPin_reqArg::GolDuino_setPin_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setPin_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _setting = new PinSetting(isSetDefault);
    _settingIsSet = isSetDefault;

}

GolDuino_setPin_reqArg *GolDuino_setPin_reqArg::dupe(void){
    GolDuino_setPin_reqArg*dupedInst = new GolDuino_setPin_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setPin_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setPin_reqArg::~GolDuino_setPin_reqArg(void){
    if(_setting != NULL){
        delete _setting;
    }

}

bool GolDuino_setPin_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setPin_reqArg::settingIsSet(void){
    return _settingIsSet;
}

PinSetting *GolDuino_setPin_reqArg::getSetting(void){
    return _setting;
}

void GolDuino_setPin_reqArg::setSetting(PinSetting*val){
    _settingIsSet = true;
    if(_setting != NULL){
        delete _setting;
    }
    _setting = val->dupe();
}

bool GolDuino_setPin_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("1");
            PinSetting *nestedType = new PinSetting();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setSetting(nestedType);
            }
            else{
                delete nestedType;
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setPin_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setPin_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_settingIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".1");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "1");
        }
        dst = tbxStrcat(dst, _setting->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setPin_rspArg::GolDuino_setPin_rspArg(void){
    initialise(true);
}

GolDuino_setPin_rspArg::GolDuino_setPin_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setPin_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _result = new PinSetting(isSetDefault);
    _resultIsSet = isSetDefault;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_setPin_rspArg *GolDuino_setPin_rspArg::dupe(void){
    GolDuino_setPin_rspArg*dupedInst = new GolDuino_setPin_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setPin_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setPin_rspArg::~GolDuino_setPin_rspArg(void){

    if(_result != NULL){
        delete _result;
    }

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_setPin_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setPin_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_setPin_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_setPin_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_setPin_rspArg::resultIsSet(void){
    return _resultIsSet;
}

PinSetting *GolDuino_setPin_rspArg::getResult(void){
    return _result;
}

void GolDuino_setPin_rspArg::setResult(PinSetting*val){
    _resultIsSet = true;
    if(_result != NULL){
        delete _result;
    }
    _result = val->dupe();
}

bool GolDuino_setPin_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_setPin_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_setPin_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_setPin_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("2");
            PinSetting *nestedType = new PinSetting();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setResult(nestedType);
            }
            else{
                delete nestedType;
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setPin_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setPin_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_resultIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".2");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "2");
        }
        dst = tbxStrcat(dst, _result->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setIO_reqArg::GolDuino_setIO_reqArg(void){
    initialise(true);
}

GolDuino_setIO_reqArg::GolDuino_setIO_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setIO_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _ioState = new IOState(isSetDefault);
    _ioStateIsSet = isSetDefault;

}

GolDuino_setIO_reqArg *GolDuino_setIO_reqArg::dupe(void){
    GolDuino_setIO_reqArg*dupedInst = new GolDuino_setIO_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setIO_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setIO_reqArg::~GolDuino_setIO_reqArg(void){
    if(_ioState != NULL){
        delete _ioState;
    }

}

bool GolDuino_setIO_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setIO_reqArg::ioStateIsSet(void){
    return _ioStateIsSet;
}

IOState *GolDuino_setIO_reqArg::getIoState(void){
    return _ioState;
}

void GolDuino_setIO_reqArg::setIoState(IOState*val){
    _ioStateIsSet = true;
    if(_ioState != NULL){
        delete _ioState;
    }
    _ioState = val->dupe();
}

bool GolDuino_setIO_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("1");
            IOState *nestedType = new IOState();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setIoState(nestedType);
            }
            else{
                delete nestedType;
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setIO_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setIO_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_ioStateIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".1");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "1");
        }
        dst = tbxStrcat(dst, _ioState->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setIO_rspArg::GolDuino_setIO_rspArg(void){
    initialise(true);
}

GolDuino_setIO_rspArg::GolDuino_setIO_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setIO_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_setIO_rspArg *GolDuino_setIO_rspArg::dupe(void){
    GolDuino_setIO_rspArg*dupedInst = new GolDuino_setIO_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setIO_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setIO_rspArg::~GolDuino_setIO_rspArg(void){

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_setIO_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setIO_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_setIO_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_setIO_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_setIO_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_setIO_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_setIO_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_setIO_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setIO_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setIO_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_buttonPressed_reqArg::GolDuino_buttonPressed_reqArg(void){
    initialise(true);
}

GolDuino_buttonPressed_reqArg::GolDuino_buttonPressed_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_buttonPressed_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _tIsSet = isSetDefault;
    _t = 0;

}

GolDuino_buttonPressed_reqArg *GolDuino_buttonPressed_reqArg::dupe(void){
    GolDuino_buttonPressed_reqArg*dupedInst = new GolDuino_buttonPressed_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_buttonPressed_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_buttonPressed_reqArg::~GolDuino_buttonPressed_reqArg(void){

}

bool GolDuino_buttonPressed_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_buttonPressed_reqArg::tIsSet(void){
    return _tIsSet;
}

int32_t GolDuino_buttonPressed_reqArg::getT(void){
    return _t;
}

void GolDuino_buttonPressed_reqArg::setT(int32_t val){
    _tIsSet = true;
    _t = val;
}

bool GolDuino_buttonPressed_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setT(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_buttonPressed_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_buttonPressed_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_tIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_t));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_buttonPressed_rspArg::GolDuino_buttonPressed_rspArg(void){
    initialise(true);
}

GolDuino_buttonPressed_rspArg::GolDuino_buttonPressed_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_buttonPressed_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_buttonPressed_rspArg *GolDuino_buttonPressed_rspArg::dupe(void){
    GolDuino_buttonPressed_rspArg*dupedInst = new GolDuino_buttonPressed_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_buttonPressed_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_buttonPressed_rspArg::~GolDuino_buttonPressed_rspArg(void){

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_buttonPressed_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_buttonPressed_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_buttonPressed_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_buttonPressed_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_buttonPressed_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_buttonPressed_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_buttonPressed_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_buttonPressed_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_buttonPressed_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_buttonPressed_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_buttonReleased_reqArg::GolDuino_buttonReleased_reqArg(void){
    initialise(true);
}

GolDuino_buttonReleased_reqArg::GolDuino_buttonReleased_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_buttonReleased_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _tIsSet = isSetDefault;
    _t = 0;

}

GolDuino_buttonReleased_reqArg *GolDuino_buttonReleased_reqArg::dupe(void){
    GolDuino_buttonReleased_reqArg*dupedInst = new GolDuino_buttonReleased_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_buttonReleased_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_buttonReleased_reqArg::~GolDuino_buttonReleased_reqArg(void){

}

bool GolDuino_buttonReleased_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_buttonReleased_reqArg::tIsSet(void){
    return _tIsSet;
}

int32_t GolDuino_buttonReleased_reqArg::getT(void){
    return _t;
}

void GolDuino_buttonReleased_reqArg::setT(int32_t val){
    _tIsSet = true;
    _t = val;
}

bool GolDuino_buttonReleased_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setT(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_buttonReleased_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_buttonReleased_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_tIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_t));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_buttonReleased_rspArg::GolDuino_buttonReleased_rspArg(void){
    initialise(true);
}

GolDuino_buttonReleased_rspArg::GolDuino_buttonReleased_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_buttonReleased_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_buttonReleased_rspArg *GolDuino_buttonReleased_rspArg::dupe(void){
    GolDuino_buttonReleased_rspArg*dupedInst = new GolDuino_buttonReleased_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_buttonReleased_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_buttonReleased_rspArg::~GolDuino_buttonReleased_rspArg(void){

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_buttonReleased_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_buttonReleased_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_buttonReleased_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_buttonReleased_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_buttonReleased_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_buttonReleased_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_buttonReleased_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_buttonReleased_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_buttonReleased_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_buttonReleased_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setPotValue_reqArg::GolDuino_setPotValue_reqArg(void){
    initialise(true);
}

GolDuino_setPotValue_reqArg::GolDuino_setPotValue_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setPotValue_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _vIsSet = isSetDefault;
    _v = 0;

}

GolDuino_setPotValue_reqArg *GolDuino_setPotValue_reqArg::dupe(void){
    GolDuino_setPotValue_reqArg*dupedInst = new GolDuino_setPotValue_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setPotValue_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setPotValue_reqArg::~GolDuino_setPotValue_reqArg(void){

}

bool GolDuino_setPotValue_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setPotValue_reqArg::vIsSet(void){
    return _vIsSet;
}

int32_t GolDuino_setPotValue_reqArg::getV(void){
    return _v;
}

void GolDuino_setPotValue_reqArg::setV(int32_t val){
    _vIsSet = true;
    _v = val;
}

bool GolDuino_setPotValue_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setV(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setPotValue_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setPotValue_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_vIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_v));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_setPotValue_rspArg::GolDuino_setPotValue_rspArg(void){
    initialise(true);
}

GolDuino_setPotValue_rspArg::GolDuino_setPotValue_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_setPotValue_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_setPotValue_rspArg *GolDuino_setPotValue_rspArg::dupe(void){
    GolDuino_setPotValue_rspArg*dupedInst = new GolDuino_setPotValue_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_setPotValue_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_setPotValue_rspArg::~GolDuino_setPotValue_rspArg(void){

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_setPotValue_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_setPotValue_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_setPotValue_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_setPotValue_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_setPotValue_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_setPotValue_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_setPotValue_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_setPotValue_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_setPotValue_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_setPotValue_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_getPotValue_reqArg::GolDuino_getPotValue_reqArg(void){
    initialise(true);
}

GolDuino_getPotValue_reqArg::GolDuino_getPotValue_reqArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_getPotValue_reqArg::initialise(bool isSetDefault){
    _corrupt = false;

    _pookyIsSet = isSetDefault;
    _pooky = 0;

}

GolDuino_getPotValue_reqArg *GolDuino_getPotValue_reqArg::dupe(void){
    GolDuino_getPotValue_reqArg*dupedInst = new GolDuino_getPotValue_reqArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_getPotValue_reqArg *)NULL;
    }
    return dupedInst;
}

GolDuino_getPotValue_reqArg::~GolDuino_getPotValue_reqArg(void){

}

bool GolDuino_getPotValue_reqArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_getPotValue_reqArg::pookyIsSet(void){
    return _pookyIsSet;
}

int32_t GolDuino_getPotValue_reqArg::getPooky(void){
    return _pooky;
}

void GolDuino_getPotValue_reqArg::setPooky(int32_t val){
    _pookyIsSet = true;
    _pooky = val;
}

bool GolDuino_getPotValue_reqArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setPooky(ival);
            }
            else{
                err = 1;
                _corrupt = true;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_getPotValue_reqArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_getPotValue_reqArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_pookyIsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_pooky));
        dst = tbxStrcat(dst, "\n");
    }

    free((void *)realPrefix);

    return dst->buf;
}


GolDuino_getPotValue_rspArg::GolDuino_getPotValue_rspArg(void){
    initialise(true);
}

GolDuino_getPotValue_rspArg::GolDuino_getPotValue_rspArg(bool isSetDefault){
    initialise(isSetDefault);
}

void GolDuino_getPotValue_rspArg::initialise(bool isSetDefault){
    _corrupt = false;

    _internalSuccess_IsSet = isSetDefault;
    _internalSuccess_ = 0;

    _result = new PotValue(isSetDefault);
    _resultIsSet = isSetDefault;

    _golgiException = new GolgiException(isSetDefault);
    _golgiExceptionIsSet = isSetDefault;

}

GolDuino_getPotValue_rspArg *GolDuino_getPotValue_rspArg::dupe(void){
    GolDuino_getPotValue_rspArg*dupedInst = new GolDuino_getPotValue_rspArg();
    if(!dupedInst->decodeFromPayload(this->encode())){
        delete dupedInst;
        dupedInst = (GolDuino_getPotValue_rspArg *)NULL;
    }
    return dupedInst;
}

GolDuino_getPotValue_rspArg::~GolDuino_getPotValue_rspArg(void){

    if(_result != NULL){
        delete _result;
    }

    if(_golgiException != NULL){
        delete _golgiException;
    }

}

bool GolDuino_getPotValue_rspArg::isCorrupt(void){
    return _corrupt;
}

bool GolDuino_getPotValue_rspArg::internalSuccess_IsSet(void){
    return _internalSuccess_IsSet;
}

int32_t GolDuino_getPotValue_rspArg::getInternalSuccess_(void){
    return _internalSuccess_;
}

void GolDuino_getPotValue_rspArg::setInternalSuccess_(int32_t val){
    _internalSuccess_IsSet = true;
    _internalSuccess_ = val;
}

bool GolDuino_getPotValue_rspArg::resultIsSet(void){
    return _resultIsSet;
}

PotValue *GolDuino_getPotValue_rspArg::getResult(void){
    return _result;
}

void GolDuino_getPotValue_rspArg::setResult(PotValue*val){
    _resultIsSet = true;
    if(_result != NULL){
        delete _result;
    }
    _result = val->dupe();
}

bool GolDuino_getPotValue_rspArg::golgiExceptionIsSet(void){
    return _golgiExceptionIsSet;
}

GolgiException *GolDuino_getPotValue_rspArg::getGolgiException(void){
    return _golgiException;
}

void GolDuino_getPotValue_rspArg::setGolgiException(GolgiException*val){
    _golgiExceptionIsSet = true;
    if(_golgiException != NULL){
        delete _golgiException;
    }
    _golgiException = val->dupe();
}

bool GolDuino_getPotValue_rspArg::decodeFromPayload(const char *payload){
    GolgiPayload *gp = new GolgiPayload();
    int err = 0;

    gp->addString(payload);

    if(gp->parse() > 0){
        if(err == 0){
            int32_t notfound = 0;
            int32_t ival = gp->getInt("1", &notfound);
            if(!notfound){
                setInternalSuccess_(ival);
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("2");
            PotValue *nestedType = new PotValue();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setResult(nestedType);
            }
            else{
                delete nestedType;
            }
        }

        if(err == 0){
            const char *nestedPayload = gp->getNestedPayload("3");
            GolgiException *nestedType = new GolgiException();
            if(nestedType->decodeFromPayload(nestedPayload)){
                setGolgiException(nestedType);
            }
            else{
                delete nestedType;
            }
        }

    }
    else{
        err = 1;
    }

    delete gp;

    return (err == 0) ? true : false;
}

const char *GolDuino_getPotValue_rspArg::encode(void){
    return encodeWithPrefix(NULL);
}

const char *GolDuino_getPotValue_rspArg::encodeWithPrefix(const char *prefix){
    static struct TbxString *dst = NULL;
    const char *realPrefix;

    if(prefix != NULL){
        struct TbxString *str1 = NULL;
        str1 = tbxStrcpy(str1, prefix);
        str1 = tbxStrcat(str1, ".");
        realPrefix = strdup(str1->buf);
        tbxStringRelease(str1);
    }
    else{
        realPrefix = strdup("");
    }

    dst = tbxStrcpy(dst, "");
    if(_internalSuccess_IsSet){
        dst = tbxStrcat(dst, realPrefix);
        dst = tbxStrcat(dst, "1: ");
        dst = tbxStrcat(dst, tbxItos(_internalSuccess_));
        dst = tbxStrcat(dst, "\n");
    }
    if(_resultIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".2");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "2");
        }
        dst = tbxStrcat(dst, _result->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }
    if(_golgiExceptionIsSet){
        struct TbxString *newPfx = NULL;
        if(*realPrefix != 0){
            newPfx = tbxStrcpy(newPfx, realPrefix);
            newPfx = tbxStrcat(newPfx, ".3");
        }
        else{
            newPfx = tbxStrcpy(newPfx, "3");
        }
        dst = tbxStrcat(dst, _golgiException->encodeWithPrefix(newPfx->buf));
        tbxStringRelease(newPfx);
    }

    free((void *)realPrefix);

    return dst->buf;
}

GolDuinoInternalSetPinRequestReceiver::GolDuinoInternalSetPinRequestReceiver(GolDuinoSetPinRequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalSetPinRequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_setPin_reqArg*arg = new GolDuino_setPin_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundSetPin(new GolDuinoSetPinResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalSetPinRequestReceiver::~GolDuinoInternalSetPinRequestReceiver(void){
}

void GolDuinoRegisterSetPinRequestReceiver(GolDuinoSetPinRequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("setPin.GolDuino", new GolDuinoInternalSetPinRequestReceiver(requestReceiver));
}

GolDuinoSetPinResultSender::GolDuinoSetPinResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoSetPinResultSender::sendResult(GolDuino_setPin_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoSetPinResultSender::success(PinSetting *arg){
    GolDuino_setPin_rspArg *rspArg = new GolDuino_setPin_rspArg();
    rspArg->setInternalSuccess_(1);
    rspArg->setResult(arg);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoSetPinResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoSetPinResultSender::~GolDuinoSetPinResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalSetPinResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalSetPinResultReceiver(GolDuinoSetPinResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalSetPinResultReceiver(void);
private:
    GolDuinoSetPinResultReceiver *resultReceiver;
};
    GolDuinoInternalSetPinResultReceiver::GolDuinoInternalSetPinResultReceiver(GolDuinoSetPinResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalSetPinResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_setPin_rspArg *rspArg = new GolDuino_setPin_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success(rspArg->getResult());
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalSetPinResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalSetPinResultReceiver::~GolDuinoInternalSetPinResultReceiver(){
}
void GolDuinoSetPin_sendTo(GolDuinoSetPinResultReceiver *resReceiver, const char *dst, GolDuino_setPin_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalSetPinResultReceiver(resReceiver), dst, "setPin.GolDuino", arg->encode());
}
GolDuinoInternalSetIORequestReceiver::GolDuinoInternalSetIORequestReceiver(GolDuinoSetIORequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalSetIORequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_setIO_reqArg*arg = new GolDuino_setIO_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundSetIO(new GolDuinoSetIOResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalSetIORequestReceiver::~GolDuinoInternalSetIORequestReceiver(void){
}

void GolDuinoRegisterSetIORequestReceiver(GolDuinoSetIORequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("setIO.GolDuino", new GolDuinoInternalSetIORequestReceiver(requestReceiver));
}

GolDuinoSetIOResultSender::GolDuinoSetIOResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoSetIOResultSender::sendResult(GolDuino_setIO_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoSetIOResultSender::success(void){
    GolDuino_setIO_rspArg *rspArg = new GolDuino_setIO_rspArg();
    rspArg->setInternalSuccess_(1);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoSetIOResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoSetIOResultSender::~GolDuinoSetIOResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalSetIOResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalSetIOResultReceiver(GolDuinoSetIOResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalSetIOResultReceiver(void);
private:
    GolDuinoSetIOResultReceiver *resultReceiver;
};
    GolDuinoInternalSetIOResultReceiver::GolDuinoInternalSetIOResultReceiver(GolDuinoSetIOResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalSetIOResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_setIO_rspArg *rspArg = new GolDuino_setIO_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success();
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalSetIOResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalSetIOResultReceiver::~GolDuinoInternalSetIOResultReceiver(){
}
void GolDuinoSetIO_sendTo(GolDuinoSetIOResultReceiver *resReceiver, const char *dst, GolDuino_setIO_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalSetIOResultReceiver(resReceiver), dst, "setIO.GolDuino", arg->encode());
}
GolDuinoInternalButtonPressedRequestReceiver::GolDuinoInternalButtonPressedRequestReceiver(GolDuinoButtonPressedRequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalButtonPressedRequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_buttonPressed_reqArg*arg = new GolDuino_buttonPressed_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundButtonPressed(new GolDuinoButtonPressedResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalButtonPressedRequestReceiver::~GolDuinoInternalButtonPressedRequestReceiver(void){
}

void GolDuinoRegisterButtonPressedRequestReceiver(GolDuinoButtonPressedRequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("buttonPressed.GolDuino", new GolDuinoInternalButtonPressedRequestReceiver(requestReceiver));
}

GolDuinoButtonPressedResultSender::GolDuinoButtonPressedResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoButtonPressedResultSender::sendResult(GolDuino_buttonPressed_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoButtonPressedResultSender::success(void){
    GolDuino_buttonPressed_rspArg *rspArg = new GolDuino_buttonPressed_rspArg();
    rspArg->setInternalSuccess_(1);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoButtonPressedResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoButtonPressedResultSender::~GolDuinoButtonPressedResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalButtonPressedResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalButtonPressedResultReceiver(GolDuinoButtonPressedResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalButtonPressedResultReceiver(void);
private:
    GolDuinoButtonPressedResultReceiver *resultReceiver;
};
    GolDuinoInternalButtonPressedResultReceiver::GolDuinoInternalButtonPressedResultReceiver(GolDuinoButtonPressedResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalButtonPressedResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_buttonPressed_rspArg *rspArg = new GolDuino_buttonPressed_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success();
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalButtonPressedResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalButtonPressedResultReceiver::~GolDuinoInternalButtonPressedResultReceiver(){
}
void GolDuinoButtonPressed_sendTo(GolDuinoButtonPressedResultReceiver *resReceiver, const char *dst, GolDuino_buttonPressed_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalButtonPressedResultReceiver(resReceiver), dst, "buttonPressed.GolDuino", arg->encode());
}
GolDuinoInternalButtonReleasedRequestReceiver::GolDuinoInternalButtonReleasedRequestReceiver(GolDuinoButtonReleasedRequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalButtonReleasedRequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_buttonReleased_reqArg*arg = new GolDuino_buttonReleased_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundButtonReleased(new GolDuinoButtonReleasedResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalButtonReleasedRequestReceiver::~GolDuinoInternalButtonReleasedRequestReceiver(void){
}

void GolDuinoRegisterButtonReleasedRequestReceiver(GolDuinoButtonReleasedRequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("buttonReleased.GolDuino", new GolDuinoInternalButtonReleasedRequestReceiver(requestReceiver));
}

GolDuinoButtonReleasedResultSender::GolDuinoButtonReleasedResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoButtonReleasedResultSender::sendResult(GolDuino_buttonReleased_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoButtonReleasedResultSender::success(void){
    GolDuino_buttonReleased_rspArg *rspArg = new GolDuino_buttonReleased_rspArg();
    rspArg->setInternalSuccess_(1);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoButtonReleasedResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoButtonReleasedResultSender::~GolDuinoButtonReleasedResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalButtonReleasedResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalButtonReleasedResultReceiver(GolDuinoButtonReleasedResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalButtonReleasedResultReceiver(void);
private:
    GolDuinoButtonReleasedResultReceiver *resultReceiver;
};
    GolDuinoInternalButtonReleasedResultReceiver::GolDuinoInternalButtonReleasedResultReceiver(GolDuinoButtonReleasedResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalButtonReleasedResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_buttonReleased_rspArg *rspArg = new GolDuino_buttonReleased_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success();
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalButtonReleasedResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalButtonReleasedResultReceiver::~GolDuinoInternalButtonReleasedResultReceiver(){
}
void GolDuinoButtonReleased_sendTo(GolDuinoButtonReleasedResultReceiver *resReceiver, const char *dst, GolDuino_buttonReleased_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalButtonReleasedResultReceiver(resReceiver), dst, "buttonReleased.GolDuino", arg->encode());
}
GolDuinoInternalSetPotValueRequestReceiver::GolDuinoInternalSetPotValueRequestReceiver(GolDuinoSetPotValueRequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalSetPotValueRequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_setPotValue_reqArg*arg = new GolDuino_setPotValue_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundSetPotValue(new GolDuinoSetPotValueResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalSetPotValueRequestReceiver::~GolDuinoInternalSetPotValueRequestReceiver(void){
}

void GolDuinoRegisterSetPotValueRequestReceiver(GolDuinoSetPotValueRequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("setPotValue.GolDuino", new GolDuinoInternalSetPotValueRequestReceiver(requestReceiver));
}

GolDuinoSetPotValueResultSender::GolDuinoSetPotValueResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoSetPotValueResultSender::sendResult(GolDuino_setPotValue_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoSetPotValueResultSender::success(void){
    GolDuino_setPotValue_rspArg *rspArg = new GolDuino_setPotValue_rspArg();
    rspArg->setInternalSuccess_(1);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoSetPotValueResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoSetPotValueResultSender::~GolDuinoSetPotValueResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalSetPotValueResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalSetPotValueResultReceiver(GolDuinoSetPotValueResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalSetPotValueResultReceiver(void);
private:
    GolDuinoSetPotValueResultReceiver *resultReceiver;
};
    GolDuinoInternalSetPotValueResultReceiver::GolDuinoInternalSetPotValueResultReceiver(GolDuinoSetPotValueResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalSetPotValueResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_setPotValue_rspArg *rspArg = new GolDuino_setPotValue_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success();
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalSetPotValueResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalSetPotValueResultReceiver::~GolDuinoInternalSetPotValueResultReceiver(){
}
void GolDuinoSetPotValue_sendTo(GolDuinoSetPotValueResultReceiver *resReceiver, const char *dst, GolDuino_setPotValue_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalSetPotValueResultReceiver(resReceiver), dst, "setPotValue.GolDuino", arg->encode());
}
GolDuinoInternalGetPotValueRequestReceiver::GolDuinoInternalGetPotValueRequestReceiver(GolDuinoGetPotValueRequestReceiver *reqReceiver){
    this->reqReceiver = reqReceiver;
}

void GolDuinoInternalGetPotValueRequestReceiver::inboundRequest(GolgiResultSender *resultSender, const char *payload){
    GolDuino_getPotValue_reqArg*arg = new GolDuino_getPotValue_reqArg(false);

    if(!arg->decodeFromPayload(payload)){
        Serial.println("Decode FAIL");
    }
    else{
        reqReceiver->inboundGetPotValue(new GolDuinoGetPotValueResultSender(resultSender), arg);
    }
    delete arg;
}

GolDuinoInternalGetPotValueRequestReceiver::~GolDuinoInternalGetPotValueRequestReceiver(void){
}

void GolDuinoRegisterGetPotValueRequestReceiver(GolDuinoGetPotValueRequestReceiver *requestReceiver){
    GolgiAPIImpl::getInstance()->registerReceiver("getPotValue.GolDuino", new GolDuinoInternalGetPotValueRequestReceiver(requestReceiver));
}

GolDuinoGetPotValueResultSender::GolDuinoGetPotValueResultSender(GolgiResultSender *golgiResultSender){
    this->golgiResultSender = golgiResultSender;
}

void GolDuinoGetPotValueResultSender::sendResult(GolDuino_getPotValue_rspArg *rspArg){
    golgiResultSender->sendResult(rspArg->encode());
    golgiResultSender = NULL;
    delete this;
}
void GolDuinoGetPotValueResultSender::success(PotValue *arg){
    GolDuino_getPotValue_rspArg *rspArg = new GolDuino_getPotValue_rspArg();
    rspArg->setInternalSuccess_(1);
    rspArg->setResult(arg);
    sendResult(rspArg);
    delete rspArg;
}

const char *GolDuinoGetPotValueResultSender::getSender(void){
    return golgiResultSender->getSender();
}

GolDuinoGetPotValueResultSender::~GolDuinoGetPotValueResultSender(void){
    if(golgiResultSender != NULL){
        //
        // Should do something here
        //
    }
}

class GolDuinoInternalGetPotValueResultReceiver: public GolgiResultReceiver{
public:
    GolDuinoInternalGetPotValueResultReceiver(GolDuinoGetPotValueResultReceiver *resultReceiver);
    void inboundResult(const char *payload);
    void inboundError(int32_t errType, const char *errText);
    ~GolDuinoInternalGetPotValueResultReceiver(void);
private:
    GolDuinoGetPotValueResultReceiver *resultReceiver;
};
    GolDuinoInternalGetPotValueResultReceiver::GolDuinoInternalGetPotValueResultReceiver(GolDuinoGetPotValueResultReceiver *resultReceiver){
    this->resultReceiver = resultReceiver;
}
void GolDuinoInternalGetPotValueResultReceiver::inboundResult(const char *payload){
    if(resultReceiver != NULL){
        GolDuino_getPotValue_rspArg *rspArg = new GolDuino_getPotValue_rspArg(false);
        rspArg->decodeFromPayload(payload);
        if(rspArg->isCorrupt()){
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(1)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        else if(rspArg->getInternalSuccess_()){
            resultReceiver->success(rspArg->getResult());
        }
        else if(rspArg->getGolgiException() != NULL){
            resultReceiver->errorWithGolgiException(rspArg->getGolgiException());
        }
        else{
            GolgiException *gex = new GolgiException();
            gex->setErrText("corrupt response(2)");
            gex->setErrType(1002); // PAYLOAD_MISMATCH
            resultReceiver->errorWithGolgiException(gex);
            delete gex;
        }
        resultReceiver = NULL;
        delete rspArg;
        delete this;
    }
}
void GolDuinoInternalGetPotValueResultReceiver::inboundError(int32_t errVal, const char *errTxt){
    if(resultReceiver != NULL){
        GolgiException *gex = new GolgiException();
        gex->setErrText(errTxt);
        gex->setErrType(errVal);
        resultReceiver->errorWithGolgiException(gex);
        delete gex;
        resultReceiver = NULL;
        delete this;
    }
}
GolDuinoInternalGetPotValueResultReceiver::~GolDuinoInternalGetPotValueResultReceiver(){
}
void GolDuinoGetPotValue_sendTo(GolDuinoGetPotValueResultReceiver *resReceiver, const char *dst, GolDuino_getPotValue_reqArg *arg){
    GolgiAPIImpl::getInstance()->sendGolgiRequest(new GolDuinoInternalGetPotValueResultReceiver(resReceiver), dst, "getPotValue.GolDuino", arg->encode());
}
